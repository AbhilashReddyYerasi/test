{% from 'macros/shared_v1.j2' import create_merge_procedure -%}
{% from 'macros/cms.j2' import convert_to_mastercountry_tz -%}

{% set status_columns = [
    ("id", "var:Id::varchar"),
    ("transport_location_id", "var:TransportLocationId::varchar"),
    ("transport_route_id", "var:TransportRouteId::varchar"),
    ("transport_task_id", "var:TransportTaskId::varchar"),
    ("transport_order_load_id", "var:TransportOrderLoadId::varchar"),
    ('data', "var:Data::varchar"),
    ("has_pictures", "var:HasPictures::boolean"),
    ("carrier_cost_id", "var:CarrierCostId::varchar"),
    ("latitude", "var:Latitude::number(18,6)"),
    ("rest_api_remarks", "var:RestApiRemarks::varchar"),
    ("is_pending_cancellation", "var:IsPendingCancellation::boolean"),
    ("cancellation_reason_code", "var:CancellationReasonCode::number(38,0)"),
    ("is_forced", "var:IsForced::boolean"),
    ("transport_order_id", "var:TransportOrderId::varchar"),
    ("skipped", "var:Skipped::boolean"),
    ("longitude", "var:Longitude::number(18,6)"),
    ("device_id", "var:DeviceId::varchar"),
    ("cancellation_note", "var:CancellationNote::varchar"),
    ("is_force_logout", "var:IsForceLogout::boolean"),
    ("status", "var:Status::varchar"),
    ("completed", convert_to_mastercountry_tz("var:Completed")),
    ("created_by", "var:CreatedBy::varchar"),
    ("created_at", convert_to_mastercountry_tz("var:CreatedAt")),
    ("updated_at", convert_to_mastercountry_tz("var:UpdatedAt")),
    ("updated_by", "var:UpdatedBy::varchar"),
    ("inserted", convert_to_mastercountry_tz("var:Inserted")),
    ("inserted_by", "var:InsertedBy::varchar"),
    ("is_deleted", "var:IsDeleted::boolean"),
    ("tenant_country_id", "var:TenantCountryId::varchar"),
    ("master_countries_country_time_zone", "coalesce(mc.country_time_zone,'UTC')"),
    ("load_ts", "convert_timezone('UTC',current_timestamp)::timestamp_tz"),
]%}

{% call create_merge_procedure(
        load_cms_schema,
        "transport_statuses"
    )
-%}
begin
    begin transaction;
        merge into {{ cms_schema }}.transport_statuses as t
        using (
            select
            {% for name, source in status_columns -%}
                {{ source }} as {{ name }}{% if not loop.last %},{% endif %}
            {% endfor -%}
            from (
                select
                    var,
                    row_number() over (partition by var:Id::varchar
                        order by greatest(
                                coalesce(
                                    var:CreatedAt::timestamp_ntz,
                                    var:UpdatedAt::timestamp_ntz
                                ),
                                coalesce(
                                    var:UpdatedAt::timestamp_ntz,
                                    var:CreatedAt::timestamp_ntz
                                )
                            ) desc nulls last)
                    as rn
                from {{ load_cms_schema }}.load_transport_statuses_stream
                ) as sub 
                left join {{ cms_schema }}.master_countries mc on mc.master_country_id = sub.var:TenantCountryId::varchar
                where rn = 1
            ) as s
            on t.id = s.id
        when matched and not(
            {% for name, _ in status_columns if name not in ['load_ts', 'updated_at'] -%}
                equal_null(t.{{ name }}, s.{{ name }}) {% if not loop.last %}and{% endif %}
            {% endfor -%}
        ) and s.updated_at > t.updated_at
        then update set
            {% for name, _ in status_columns -%}
                t.{{ name }} = s.{{ name }}{% if not loop.last %},{% endif %}
            {% endfor -%}
        when not matched then insert (
            {% for name, _ in status_columns -%}
                {{ name }}{% if not loop.last %},{% endif %}
            {% endfor -%}
        ) values (
            {% for name, _ in status_columns -%}
                s.{{ name }}{% if not loop.last %},{% endif %}
            {% endfor -%}
        );

         -- retrieve image ids and store on storage account
         -- load only image id's after jan 1st 2023 only.
        merge into {{ cms_schema }}.transport_status_images as t

        using (
            with image_arrays as (
                select
                    var:TransportOrderId::varchar as transport_order_id,
                    var:Status::varchar as transport_status,
                    try_parse_json(var:Data::varchar):pictures as pictures
                from {{ load_cms_schema }}.load_transport_statuses_stream
                where pictures is not null and var:UpdatedAt::timestamp_ntz>= '2023-01-01 00:00:00.000'
            ),

            image_ids as (
                select 
                    fl.value:"imageLink" as image_id,
                    fl.value:"mimeType" as document_type,
                    transport_order_id,
                    transport_status
                from image_arrays t,
                    lateral flatten (t.pictures) fl    
            ), 

            image_ids_2 as (
                    select 
                        image_id,
                        document_type,
                        shipment_number,
                        project_id,
                        transport_status,
                        tor.country_code,
                        coalesce(mc.country_time_zone,'UTC') as master_countries_country_timezone
                    from image_ids 
                        left join {{ cms_schema }}.transport_orders tor on tor.id = image_ids.transport_order_id
                        left join {{ cms_schema }}.master_countries mc on mc.master_country_id =  tor.tenant_country_id
                    where to_char(image_id) is not null
            )
            
            select distinct
                image_id,
                master_countries_country_timezone,
                document_type,
                shipment_number,
                project_id,
                transport_status,
                country_code
            from image_ids_2

        ) as s
        on t.image_id = s.image_id
        
        when not matched then insert (
            image_id,
            document_type,
            shipment_number,
            project_id,
            transport_status,
            master_countries_country_time_zone,
            country_code
        ) values (
            s.image_id,
            s.document_type,
            s.shipment_number,
            s.project_id,
            s.transport_status,
            s.master_countries_country_timezone,
            s.country_code
        );
    commit;
end
{%- endcall %}


{% if is_prod %}

create or replace external function {{ load_cms_schema }}.get_driver_images("id" varchar(16777216))
returns variant
api_integration = "AZ_API"
compression = auto
as 'https://apim-dhdp-prod.azure-api.net/diverimagespost/load_pictures';


create or replace task {{ load_cms_schema }}.transport_status_images_merge_task
	schedule='60 minute'
	user_task_managed_initial_warehouse_size='XSMALL'
	as
    -- retrieve image ids and store on storage account
    merge into {{ cms_schema }}.transport_status_images as t
    using (
        select
            image_id,
            {{ load_cms_schema }}.get_driver_images(image_id) as url
        from
            {{ cms_schema }}.transport_status_images
        where
            url is null and
            image_id is not null
    ) as s
    on t.image_id = s.image_id
    when matched and not(
        equal_null(t.image_id, s.image_id)
        and equal_null(t.url, s.url)
    ) then update set
        t.image_id = s.image_id,
        t.url = s.url,
        t.load_ts = sysdate()
    when not matched then insert (
        image_id,
        url,
        load_ts
    ) values (
        s.image_id,
        s.url,
        sysdate()
    );

alter task {{ load_cms_schema }}.transport_status_images_merge_task resume;

{% endif %}
