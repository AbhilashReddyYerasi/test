{% from 'macros/shared_v1.j2' import create_merge_task -%}

{#
Creates a merge task for {table_name}, given the {columns}.
The query assums that the source contains the following mandatoy columns:
- updated_date

The output tabel will also contain:
- load_ts
#}
{% macro create_cfx_merge_task(
    output_schema,
    load_schema,
    table_name,
    columns,
    unique_id
) -%}

{% set unique_id = unique_id | default(('id', "var:Id::varchar")) %}
{% set unique_id_raw = unique_id[1] %}
{% set unique_id_final = unique_id[0] %}

{% set all_columns = columns + [
    ("load_ts", "convert_timezone('UTC',CURRENT_TIMESTAMP)::timestamp_tz")
] %}

{% call create_merge_task(load_schema, table_name) -%}

merge into {{ output_schema }}.{{ table_name }} as t
    using (
        with transformed_{{ table_name }} as (
            select
                {% for name, source in all_columns -%}
                    {{ source }} as {{ name }}{% if not loop.last %},{% endif %}
                {% endfor -%}
            from {{ load_schema }}.load_{{ table_name }}_stream
        )
        select * from (
            select
                *,
                row_number() over (partition by {{ unique_id_final }}
                    order by greatest(
                            coalesce(
                                insert_date,
                                update_date
                            ),
                            coalesce(
                                update_date,
                                insert_date
                            )
                        ) desc nulls last)
                as rn
            from transformed_{{ table_name }}
        ) where rn = 1
        ) as s
        on t.{{ unique_id_final }} = s.{{ unique_id_final }}
    when matched and not(
        {% for name, _ in all_columns if name not in ['load_ts'] -%}
            equal_null(t.{{ name }}, s.{{ name }}) {% if not loop.last %}and{% endif %}
        {% endfor -%}
    ) and s.update_date > t.update_date
    then update set
        {% for name, _ in all_columns -%}
            t.{{ name }} = s.{{ name }}{% if not loop.last %},{% endif %}
        {% endfor -%}
    when not matched then insert (
        {% for name, _ in all_columns -%}
            {{ name }}{% if not loop.last %},{% endif %}
        {% endfor -%}
    ) values (
        {% for name, _ in all_columns -%}
            s.{{ name }}{% if not loop.last %},{% endif %}
        {% endfor -%}
    )
{%- endcall %}

{%- endmacro %}
